{{- if (or (not (empty .Values.celeryWorker)) (not (empty .Values.celeryBeat))) }}
********************************************************************
***                      DEPRECATION NOTICE                      ***
********************************************************************
{{ if (not (empty .Values.celeryWorker)) }}
The celeryWorkers helm value has been deprecated and moved to workers.default see
https://docs.nautobot.com/projects/helm-charts/en/stable/configuration/reference/#workers-values for more information.
{{ end }}{{ if (not (empty .Values.celeryBeat)) }}
The celeryBeat helm value has been deprecated and moved to workers.beat see
https://docs.nautobot.com/projects/helm-charts/en/stable/configuration/reference/#workers-values for more information.
{{ end }}
{{ end }}
{{- if and (or .Values.postgresql.enabled .Values.mariadb.enabled .Values.nautobot.db.host ) (or .Values.redis.enabled .Values.nautobot.redis.host) -}}

*********************************************************************
*** PLEASE BE PATIENT: Nautobot may take a few minutes to install ***
*********************************************************************

1. Get the Nautobot URL:

{{- if .Values.ingress.enabled }}

  You should be able to access your new Nautobot installation through

  http://{{- .Values.ingress.hostname }}/

{{- else if eq .Values.service.type "LoadBalancer" }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ include "common.names.fullname" . }}'

  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")

{{- $port:=.Values.service.port | toString }}
  echo "Nautobot URL: http://$SERVICE_IP{{- if ne $port "80" }}:{{ .Values.service.port }}{{ end }}/"

{{- else if eq .Values.service.type "ClusterIP" }}

  echo "Nautobot URL: http://127.0.0.1:8080/"
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "common.names.fullname" . }} 8080:{{ .Values.service.port }}

{{- end }}

{{- if eq .Values.service.type "NodePort" }}

  Or running:

  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "common.names.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Nautobot URL: http://$NODE_IP:$NODE_PORT/"

{{- end }}
{{- if and .Values.nautobot.superUser.enabled (not .Values.nautobot.superUser.existingSecret) }}

2. Get your Nautobot login admin credentials by running:

  echo Username: {{ .Values.nautobot.superUser.username }}
  echo Password: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }}-env -o jsonpath="{.data.NAUTOBOT_SUPERUSER_PASSWORD}" | base64 --decode)
  echo api-token: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }}-env -o jsonpath="{.data.NAUTOBOT_SUPERUSER_API_TOKEN}" | base64 --decode)
{{- end }}
{{- if not (or .Values.nautobot.secretKey .Values.nautobot.django.secretKey .Values.nautobot.django.existingSecret) }}

Make sure you take note of your Nautobot `NAUTOBOT_SECRET_KEY` by running:

  echo Secret Key: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }}-env -o jsonpath="{.data.NAUTOBOT_SECRET_KEY}" | base64 --decode)
{{- end }}
{{- if .Values.postgresql.enabled }}

To take a backup of the database run:

  export POSTGRES_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }}-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode)
  echo $POSTGRES_PASSWORD | kubectl exec -itn {{ .Release.Namespace }} statefulset.apps/{{ include "common.names.fullname" . }}-postgresql -- pg_dump --username {{ .Values.postgresql.auth.username }} --clean --if-exists nautobot > backup.sql

{{- end }}
{{- else -}}

########################################################################################
### ERROR: You did not provide an external database host in your 'helm install' call ###
########################################################################################

This deployment will be incomplete until you configure Nautobot with a resolvable database
host. To configure Nautobot to use and external database host:

## PLEASE UPDATE THE EXTERNAL DATABASE CONNECTION PARAMETERS IN THE FOLLOWING COMMAND AS NEEDED ##

  helm upgrade {{ .Release.Name }} bitnami/{{ .Chart.Name }} \
    --set service.type={{ .Values.service.type }},postgres.enabled=false{{- if not (empty .Values.nautobot.db.user) }},nautobot.db.user={{ .Values.nautobot.db.user }}{{- end }}{{- if not (empty .Values.nautobot.db.password) }},nautobot.db.password={{ .Values.nautobot.db.password }}{{- end }}{{- if not (empty .Values.nautobot.db.name) }},nautobot.db.name={{ .Values.nautobot.db.name }}{{- end }},nautobot.db.host=YOUR_EXTERNAL_DATABASE_HOST{{- if .Values.global }}{{- if .Values.global.imagePullSecrets }},global.imagePullSecrets={{ .Values.global.imagePullSecrets }}{{- end }}{{- end }}

{{- end }}


{{- include "common.warnings.rollingTag" .Values.nautobot.image }}
