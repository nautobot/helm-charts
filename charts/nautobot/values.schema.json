{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$defs": {
    "empty-object": {
      "type": "object",
      "additionalProperties": false
    },
    "celery": {
      "allOf": [
        {
          "$ref": "#/$defs/deployment"
        },
        {
          "type": "object",
          "properties": {
            "concurrency": {
              "type": "integer",
              "minimum": 0
            },
            "enabled": {
              "type": "boolean"
            },
            "taskQueues": {
              "type": "string"
            },
            "metricsPort": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          }
        }
      ]
    },
    "deployment": {
      "type": "object",
      "properties": {
        "affinity": {
          "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/affinity.json"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "autoscaling": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "behavior": {
              "type": "object"
            },
            "enabled": {
              "type": "boolean"
            },
            "minReplicas": {
              "type": "integer",
              "minimum": 1
            },
            "maxReplicas": {
              "type": "integer",
              "minimum": 1
            },
            "metrics": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "persistenceStaticFiles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "storageClassName": {
              "type": "string"
            },
            "accessMode": {
              "type": "string"
            },
            "size": {
              "type": "string"
            },
            "selector": {
              "type": "object"
            }
          },
          "required": [
            "accessMode",
            "enabled",
            "selector",
            "size",
            "storageClassName"
          ],
          "title": "Persistence"
        },
        "persistenceMediaFiles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "storageClassName": {
              "type": "string"
            },
            "accessMode": {
              "type": "string"
            },
            "size": {
              "type": "string"
            },
            "selector": {
              "type": "object"
            }
          },
          "required": [
            "accessMode",
            "enabled",
            "selector",
            "size",
            "storageClassName"
          ],
          "title": "Persistence"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerSecurityContext": {
          "$ref": "#/$defs/securityContext"
        },
        "extraEnvVars": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/envvar.json"
          }
        },
        "extraEnvVarsCM": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extraEnvVarsSecret": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extraVolumeMounts": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/volumemount.json"
          }
        },
        "extraVolumes": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/volume.json"
          }
        },
        "hostAliases": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/hostalias.json"
          }
        },
        "initContainers": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/container.json"
          }
        },
        "lifecycleHooks": {
          "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/lifecycle.json"
        },
        "livenessProbe": {
          "$ref": "#/$defs/probe"
        },
        "nodeAffinityPreset": {
          "type": "object",
          "required": [
            "key",
            "type",
            "values"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "pattern": "^(soft|hard|)$"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic"
        },
        "pdb": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "create": {
              "type": "boolean"
            },
            "maxUnavailable": {
              "type": "integer",
              "minimum": 1
            },
            "minAvailable": {
              "type": "integer",
              "minimum": 1
            }
          }
        },
        "podAffinityPreset": {
          "type": "string",
          "pattern": "^(soft|hard|)$"
        },
        "podAntiAffinityPreset": {
          "type": "string",
          "pattern": "^(soft|hard|)$"
        },
        "podAnnotations": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ]
        },
        "podLabels": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ]
        },
        "podSecurityContext": {
          "$ref": "#/$defs/podSecurityContext"
        },
        "priorityClassName": {
          "type": "string"
        },
        "readinessProbe": {
          "$ref": "#/$defs/probe"
        },
        "replicaCount": {
          "type": "integer",
          "minimum": 0
        },
        "revisionHistoryLimit": {
          "type": "integer",
          "minimum": 1
        },
        "resources": {
          "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/resourcerequirements.json"
        },
        "sidecars": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/container.json"
          }
        },
        "terminationGracePeriodSeconds": {
          "type": "integer"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/toleration.json"
          }
        },
        "updateStrategy": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "pattern": "^(Recreate|RollingUpdate)$"
            }
          }
        }
      }
    },
    "nautobot": {
      "allOf": [
        {
          "$ref": "#/$defs/deployment"
        },
        {
          "type": "object",
          "properties": {
            "allowedHosts": {
              "type": "string"
            },
            "config": {
              "type": "string"
            },
            "db": {
              "additionalProperties": false,
              "required": [
                "engine",
                "existingSecret",
                "existingSecretPasswordKey",
                "host",
                "name",
                "password",
                "port",
                "timeout",
                "user"
              ],
              "properties": {
                "engine": {
                  "type": "string",
                  "pattern": "^(django\\.db\\.backends\\.postgresql|django\\.db\\.backends\\.mysql|django_prometheus\\.db\\.backends\\.postgresql|django_prometheus\\.db\\.backends\\.mysql)$"
                },
                "existingSecret": {
                  "type": "string"
                },
                "existingSecretPasswordKey": {
                  "type": "string"
                },
                "host": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "port": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "minimum": 1,
                  "maximum": 65535
                },
                "timeout": {
                  "type": "integer",
                  "minimum": 0
                },
                "user": {
                  "type": "string"
                }
              }
            },
            "debug": {
              "type": "boolean"
            },
            "enabled": {
              "type": "boolean"
            },
            "extraVars": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            "image": {
              "type": "object",
              "required": [
                "pullPolicy",
                "pullSecrets",
                "registry",
                "repository",
                "tag"
              ],
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "pattern": "^(Always|Never|IfNotPresent)$"
                },
                "pullSecrets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "registry": {
                  "type": "string"
                },
                "repository": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                }
              }
            },
            "logLevel": {
              "type": "string",
              "pattern": "^(CRITICAL|ERROR|WARNING|INFO|DEBUG)"
            },
            "metrics": {
              "type": "boolean"
            },
            "redis": {
              "additionalProperties": false,
              "required": [
                "existingSecret",
                "existingSecretPasswordKey",
                "host",
                "password",
                "port",
                "ssl",
                "username"
              ],
              "properties": {
                "existingSecret": {
                  "type": "string"
                },
                "existingSecretPasswordKey": {
                  "type": "string"
                },
                "host": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "port": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "minimum": 1,
                  "maximum": 65535
                },
                "ssl": {
                  "type": "boolean"
                },
                "username": {
                  "type": "string"
                }
              }
            },
            "secretKey": {
              "type": "string"
            },
            "superUser": {
              "required": [
                "apitoken",
                "email",
                "enabled",
                "username",
                "password"
              ],
              "properties": {
                "apitoken": {
                  "type": "string",
                  "pattern": "^([0-9A-Za-z]+|)$"
                },
                "email": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "password": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              }
            },
            "singleInit": {
              "type": "boolean"
            },
            "uWSGIini": {
              "type": "string"
            },
            "uwsgi": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "listen": {
                  "type": "integer",
                  "minimum": 0
                },
                "processes": {
                  "type": "integer",
                  "minimum": 0
                },
                "threads": {
                  "type": "integer",
                  "minimum": 0
                },
                "bufferSize": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 65535
                },
                "harakiri": {
                  "type": "integer"
                }
              }
            }
          }
        }
      ]
    },
    "probe": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12/probe.json"
        },
        {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "securityContext": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12/securitycontext.json"
        },
        {
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "podSecurityContext": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12/podsecuritycontext.json"
        },
        {
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "type": "object",
  "additionalProperties": false,
  "required": [
    "workers",
    "celery",
    "celeryBeat",
    "celeryWorker",
    "commonAnnotations",
    "ingress",
    "initJob",
    "mariadb",
    "metrics",
    "nautobot",
    "nautobots",
    "postgresql",
    "postgresqlha",
    "rabbitmq",
    "redis",
    "service",
    "serviceAccount"
  ],
  "properties": {
    "celery": {
      "allOf": [
        {
          "$ref": "#/$defs/celery"
        }
      ]
    },
    "celeryBeat": {
      "description": "DEPRECATED See workers.beat",
      "allOf": [
        {
          "$ref": "#/$defs/celery"
        }
      ]
    },
    "celeryWorker": {
      "description": "DEPRECATED See workers.default",
      "allOf": [
        {
          "$ref": "#/$defs/celery"
        }
      ]
    },
    "common": {
      "type": "object"
    },
    "commonAnnotations": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "enabled": {
      "type": "boolean"
    },
    "global": {
      "type": "object"
    },
    "ingress": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "backendProtocol",
        "enabled",
        "extraHosts",
        "extraPaths",
        "extraTls",
        "ingressClassName",
        "pathType",
        "hostname",
        "path",
        "annotations",
        "tls"
      ],
      "properties": {
        "apiVersion": {
          "type": [
            "null",
            "string"
          ]
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "backendProtocol": {
          "type": "string",
          "pattern": "^(http|https)$"
        },
        "enabled": {
          "type": "boolean"
        },
        "extraHosts": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "backendProtocol": {
                "type": "string",
                "pattern": "^(http|https)$"
              },
              "extraPaths": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "hostname": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "pathType": {
                "type": "string",
                "pattern": "^(Exact|Prefix|ImplementationSpecific)$"
              }
            }
          }
        },
        "extraPaths": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "extraTls": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "hostname": {
          "type": "string"
        },
        "ingressClassName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "pathType": {
          "type": "string",
          "pattern": "^(Exact|Prefix|ImplementationSpecific)$"
        },
        "secretName": {
          "type": "string"
        },
        "tls": {
          "type": "boolean"
        }
      }
    },
    "initJob": {
      "allOf": [
        {
          "$ref": "#/$defs/deployment"
        },
        {
          "required": [
            "installHook",
            "upgradeHook"
          ],
          "properties": {
            "installHook": {
              "type": "string",
              "pattern": "^(post-install|pre-install)$"
            },
            "upgradeHook": {
              "type": "string",
              "pattern": "^(post-upgrade|pre-upgrade)$"
            }
          }
        }
      ]
    },
    "mariadb": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/bitnami/charts/ba59192a4d0b28454f072903e5186d8bb2adf43f/bitnami/mariadb/values.schema.json"
        },
        {
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "metrics": {
      "additionalProperties": false,
      "type": "object",
      "required": [
        "capacityMetrics",
        "enabled",
        "nginxExporter",
        "prometheusRule",
        "serviceMonitor",
        "uwsgiExporter"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "capacityMetrics": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "enabled",
            "nautobot"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "interval": {
              "type": "string"
            },
            "nautobot": {
              "type": "string"
            },
            "scrapeTimeout": {
              "type": "string"
            },
            "labels": {
              "type": "object"
            }
          }
        },
        "nginxExporter": {
          "type": "object"
        },
        "prometheusRule": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "labels": {
              "type": "object"
            },
            "rules": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "serviceMonitor": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "interval": {
              "type": "string"
            },
            "scrapeTimeout": {
              "type": "string"
            },
            "labels": {
              "type": "object"
            }
          }
        },
        "uwsgiExporter": {
          "type": "object"
        }
      }
    },
    "nautobot": {
      "allOf": [
        {
          "$ref": "#/$defs/nautobot"
        }
      ]
    },
    "nautobots": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9]+$": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/nautobot"
            },
            {
              "required": [
                "enabled",
                "ingressPaths",
                "initNautobot"
              ],
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "ingressPaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "initNautobot": {
                  "type": "boolean"
                },
                "staticFilesOnly": {
                  "type": "boolean"
                }
              }
            }
          ]
        }
      },
      "description": "List of Nautobot objects (matching the Nautobot spec) to create deployments for"
    },
    "postgresql": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/bitnami/charts/d3ec8fa952007380c6001c526b027a8bb064cbab/bitnami/postgresql/values.schema.json"
        },
        {
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "postgresql-ha": {
      "type": "object"
    },
    "postgresqlha": {
      "type": "object",
      "required": [
        "enabled",
        "pgpool",
        "postgresql"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "pgpool": {
          "type": "object",
          "required": [
            "adminPassword"
          ],
          "properties": {
            "adminPassword": {
              "type": "string"
            }
          }
        },
        "postgresql": {
          "type": "object",
          "required": [
            "password",
            "postgresPassword",
            "repmgrPassword"
          ],
          "properties": {
            "password": {
              "type": "string"
            },
            "postgresPassword": {
              "type": "string"
            },
            "repmgrPassword": {
              "type": "string"
            }
          }
        }
      }
    },
    "rabbitmq": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "redis": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/bitnami/charts/6d27b518fe3bf57fb792ac42f16133177f2c4d76/bitnami/redis/values.schema.json"
        },
        {
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "service": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "annotations",
        "externalTrafficPolicy",
        "extraPorts",
        "httpsPort",
        "loadBalancerSourceRanges",
        "nodePorts",
        "port",
        "type"
      ],
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type:": "object"
        },
        "clusterIP": {
          "type": [
            "null",
            "string"
          ],
          "pattern": "^((?:[0-9]{1,3}\\.){3}[0-9]{1,3}|(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4})$",
          "description": "Optional, clusterIP, should match IPv4 or IPv6: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
        },
        "externalTrafficPolicy": {
          "type": "string",
          "pattern": "^(Cluster|Local)$",
          "description": "External Traffic Policy: https://kubernetes.io/docs/concepts/services-networking/service/"
        },
        "extraPorts": {
          "type": "array",
          "items": {
            "$ref": "https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.23.12-standalone-strict/serviceport.json"
          },
          "description": "Extra ports to expose in the nautobot service (normally used with the `sidecars` value)"
        },
        "httpsPort": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        },
        "loadBalancerIP": {
          "type": [
            "null",
            "string"
          ],
          "pattern": "^((?:[0-9]{1,3}\\.){3}[0-9]{1,3}|(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4})$",
          "description": "Optional, loadBalancerIP, should match IPv4 or IPv6: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
        },
        "loadBalancerSourceRanges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nodePorts": {
          "type": "object",
          "properties": {
            "http": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 1,
              "maximum": 65535,
              "description": "Node Port to use for the http service, the default range is 30000-32767 however this can be changed with --service-node-port-range"
            },
            "https": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 1,
              "maximum": 65535,
              "description": "Node Port to use for the https service, the default range is 30000-32767 however this can be changed with --service-node-port-range"
            },
            "uwsgimetrics": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 1,
              "maximum": 65535,
              "description": "Node Port to use for the https service, the default range is 30000-32767 however this can be changed with --service-node-port-range"
            }
          }
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        },
        "type": {
          "type": "string",
          "pattern": "^(ExternalName|ClusterIP|NodePort|LoadBalancer)$",
          "description": "Service Type: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"
        }
      }
    },
    "serviceAccount": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "annotations",
        "automountServiceAccountToken",
        "create",
        "name"
      ],
      "properties": {
        "automountServiceAccountToken": {
          "type": "boolean"
        },
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type:": "object"
        },
        "create": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "sops": {
      "type": "object"
    },
    "workers": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9]+$": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/celery"
            },
            {
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          ]
        }
      },
      "description": "List of Nautobot objects (matching the Nautobot spec) to create deployments for"
    }
  }
}
