---
# -- Annotations to be applied to ALL resources created by this chart
commonAnnotations: {}

# Nautobot UI front end service
service:
  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/service/) Kubernetes service type, valid values: `ExternalName`, `ClusterIP`, `NodePort`, or `LoadBalancer`
  type: "ClusterIP"
  # -- Port to expose for Nautobot http access
  port: 80
  # -- Port to expose for Nautobot https access
  httpsPort: 443
  # Node ports to expose if service.type is NodePort
  nodePorts:
    # -- Node port for Nautobot http choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    http:  # yamllint disable-line rule:empty-values
    # -- Node port for Nautobot https choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    https:  # yamllint disable-line rule:empty-values
  # -- IP address to use as the clusterIP
  clusterIP:  # yamllint disable-line rule:empty-values
  # -- IP address to use as the loadBalancerIP
  loadBalancerIP:  # yamllint disable-line rule:empty-values
  # -- List of allowed CIDRs to access the load balancer default 0.0.0.0/0, cloud provider dependent
  loadBalancerSourceRanges: []
  # -- Kubernetes externalTrafficPolicy valid values: `Cluster` or `Local`
  externalTrafficPolicy: "Cluster"
  # -- Annotations to be applied to the service resource
  annotations: {}
  # -- Extra ports to expose in the nautobot service (normally used with the `sidecars` value)
  extraPorts: []

# Nautobot Server
nautobot:
  # Nautobot image
  image:
    # -- Nautobot image registry, common to all deployments
    registry: "ghcr.io"
    # -- Nautobot image name, common to all deployments
    repository: "nautobot/nautobot"
    # -- Nautobot image tag, common to all deployments
    tag: "1.3.4-py3.10"
    # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/), common to all deployments valid values: `Always`, `Never`, or `IfNotPresent`
    pullPolicy: "Always"
    # -- List of secret names to be used as image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/), common to all deployments
    pullSecrets: []
    # e.g.
    # pullSecrets:
    #   - myRegistryKeySecretName

  # -- Number of Nautobot server replicas to deploy
  replicaCount: 2
  # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy) Number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot liveness probe
  # @default -- See values.yaml
  livenessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot readiness probe
  # @default -- See values.yaml
  readinessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](http://kubernetes.io/docs/user-guide/compute-resources/) Nautobot resource requests and limits
  # @default -- See values.yaml
  resources:
    requests:
      cpu: "100m"
      memory: "1280M"
    limits:
      cpu: "600m"
      memory: "8704M"

  # -- [ref](ttps://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Pods Security Context
  # @default -- See values.yaml
  podSecurityContext:
    enabled: true
    fsGroup: 999
    seccompProfile:
      type: "RuntimeDefault"

  # -- [ref](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) Nautobot Pod Distribution Budget
  # @default -- See values.yaml
  pdb:
    create: false
    minAvailable: 1
    # maxUnavailable: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Container Security Context
  # @default -- See values.yaml
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: false  # Must be set to false due to jobs directory
    runAsUser: 999
    runAsGroup: 999
    capabilities:
      drop:
        - "ALL"

  # -- Override default Nautobot container command (useful when using custom images)
  command: []
  # -- Override default Nautobot container args (useful when using custom images)
  args: []
  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/) Nautobot pods host aliases
  hostAliases: []
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) Extra labels for Nautobot pods
  podLabels: {}
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) Annotations for Nautobot pods
  podAnnotations: {}
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) Nautobot Node Affinity preset
  # @default -- See values.yaml
  nodeAffinityPreset:
    # -- Nautobot Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- Node label values to match. Ignored if `nautobot.affinity` is set
    values: []
    # e.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2

  # -- [ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity) Affinity for Nautobot pods assignment
  affinity: {}
  # -- [ref](https://kubernetes.io/docs/user-guide/node-selection/) Node labels for Nautobot pods assignment
  nodeSelector: {}
  # -- [ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/) Tolerations for Nautobot pods assignment
  tolerations: []

  updateStrategy:
    # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies) Nautobot Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot pods' priorityClassName
  priorityClassName: ""
  # -- lifecycleHooks for the Nautobot container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- Extra Env Vars to set only on the Nautobot server pods
  extraEnvVars: []
  # e.g.
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"

  # -- List of names of existing ConfigMaps containing extra env vars for Nautobot server pods
  extraEnvVarsCM: []
  # -- List of names of existing Secrets containing extra env vars for Nautobot server pods
  extraEnvVarsSecret: []
  # -- List of additional volumes for the Nautobot server pod
  extraVolumes: []
  # -- List of additional volumeMounts for the Nautobot containers
  extraVolumeMounts: []
  # -- Add additional sidecar containers to the Nautobot server pods
  sidecars: []
  # e.g.
  # sidecars:
  #   - name: your-image-name
  #     image: your-image
  #     imagePullPolicy: Always
  #     ports:
  #       - name: portname
  #         containerPort: 1234

  # -- [ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) Add additional init containers to the Nautobot server pods
  initContainers: []
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']

  # -- [ref](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/) Define a horizontal pod autoscaler
  # @default -- See values.yaml
  autoscaling:
    # -- Add an horizontal pod autoscaler for Nautobot (beta)
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    metrics:
      - type: "Resource"
        resource:
          name: "cpu"
          target:
            type: "Utilization"
            averageUtilization: 150
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 2
            periodSeconds: 15

  #################################
  # Nautobot Application Settings #
  #################################
  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/) Replace the entire `nautobot_config.py` file with this value
  config: ""
  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/#debug) Enable Nautobot Debug (NAUTOBOT_DEBUG)
  debug: false

  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#allowed_hosts) Space seperated list of Nautobot allowed hosts (NAUTOBOT_ALLOWED_HOSTS)
  allowedHosts: "*"

  # Nautobot database configuration
  db:
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot database engine, valid values: `django.db.backends.postgresql` and `django.db.backends.mysql` (NAUTOBOT_DB_ENGINE)
    engine: "django.db.backends.postgresql"
    # -- Name of existing secret to use for Database passwords
    existingSecret: ""
    # -- Password key to be retrieved from existing secret
    existingSecretPasswordKey: "NAUTOBOT_DB_PASSWORD"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database hostname, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_HOST)
    host: "postgres"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database name, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_NAME)
    name: "nautobot"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database password, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_PASSWORD)
    password: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database port, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_PORT)
    port: 5432
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot database timeout (NAUTOBOT_DB_TIMEOUT)
    timeout: 300
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database username, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_USER)
    user: "nautobot"

  # -- Log Level used for Celery logging, valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`
  logLevel: "INFO"
  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/#metrics_enabled) Enable Prometheus metrics endpoint (NAUTOBOT_METRICS_ENABLED)
  metrics: true

  # Nautobot Redis configuration
  redis:
    # -- Name of existing secret to use for Redis passwords
    existingSecret: ""
    # -- Password key to be retrieved from existing secret
    existingSecretPasswordKey: "NAUTOBOT_REDIS_PASSWORD"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external Redis hostname, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_HOST)
    host: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external Redis password, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_PASSWORD)
    password: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external Redis port, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_PORT)
    port: 6379
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external Redis ssl enabled, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_SSL)
    ssl: false
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external Redis username, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_USERNAME)
    username: ""

  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#secret_key) Nautobot Secret Key (NAUTOBOT_SECRET_KEY)
  secretKey: ""
  superUser:
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_create_superuser) Create a new super user account in Nautobot once deployed (NAUTOBOT_CREATE_SUPERUSER)
    enabled: true
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_api_token) Configure an API key for the super user if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_API_TOKEN)
    apitoken: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_email) Configure an email address for the super user if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_EMAIL)
    email: "admin@example.com"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_name) User name to use for the super user to be created if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_NAME)
    username: "admin"  # NAUTOBOT_SUPERUSER_NAME
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_password) Password to use for the super user to be created if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_NAME), if unset a random password will be generated
    password: ""  # NAUTOBOT_SUPERUSER_PASSWORD

  # -- [ref](https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html) Replace the entire `uwsgi.ini` file with this value
  uWSGIini: ""

  # -- An array of envirnoment variable objects (`name` and `value` are required) to add to ALL Nautobot related deployments (i.e. `celeryWorker` and `rqWorker`)
  extraVars: []  # https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/
  # e.g.
  # extraVars:
  #   - name: "NAUTOBOT_BANNER_TOP"
  #     value: "Nautobot Helm Chart"

# Nautobot RQ Worker
rqWorker:
  # -- Enables the RQ Worker for Nautobot
  enabled: false
  # -- Number of Nautobot RQ Workers replicas to deploy
  replicaCount: 2
  # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy) Number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot RQ Worker liveness probe
  # @default -- See values.yaml
  livenessProbe:
    enabled: true
    exec:
      command:
        - "nautobot-server"
        - "health_check"
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 8
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot RQ Worker readiness probe
  # @default -- See values.yaml
  readinessProbe:
    enabled: true
    exec:
      command:
        - "nautobot-server"
        - "health_check"
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 8
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](http://kubernetes.io/docs/user-guide/compute-resources/) Nautobot RQ Worker resource requests and limits
  # @default -- See values.yaml
  resources:
    requests:
      cpu: ".1"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "1Gi"

  # -- [ref](ttps://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot RQ Worker Pods Security Context
  # @default -- See values.yaml
  podSecurityContext:
    enabled: true
    fsGroup: 999
    seccompProfile:
      type: "RuntimeDefault"

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot RQ Worker Container Security Context
  # @default -- See values.yaml
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: false  # Must be set to false due to jobs directory
    runAsUser: 999
    capabilities:
      drop:
        - "ALL"

  # -- Override default Nautobot RQ Worker container command (useful when using custom images)
  # @default -- See values.yaml
  command:
    - "nautobot-server"
    - "rqworker"

  # -- Override default Nautobot RQ Worker container args (useful when using custom images)
  args: []
  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/) Nautobot RQ Worker pods host aliases
  hostAliases: []
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) Extra labels for Nautobot RQ Worker pods
  podLabels: {}
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) Annotations for Nautobot RQ Worker pods
  podAnnotations: {}
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot RQ Worker Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot RQ Worker Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) Nautobot RQ Worker Node Affinity preset
  # @default -- See values.yaml
  nodeAffinityPreset:
    # -- Nautobot RQ Worker Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- Node label values to match. Ignored if `nautobot.affinity` is set
    values: []
    # e.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2

  # -- [ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity) Affinity for Nautobot RQ Worker pods assignment
  affinity: {}
  # -- [ref](https://kubernetes.io/docs/user-guide/node-selection/) Node labels for Nautobot RQ Worker pods assignment
  nodeSelector: {}
  # -- [ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/) Tolerations for Nautobot RQ Worker pods assignment
  tolerations: []

  updateStrategy:
    # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies) Nautobot RQ Worker Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot RQ Worker pods' priorityClassName
  priorityClassName: ""
  # -- lifecycleHooks for the Nautobot RQ Worker container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- Extra Env Vars to set only on the Nautobot RQ Worker pods
  extraEnvVars: []
  # e.g.
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"

  # -- List of names of existing ConfigMaps containing extra env vars for Nautobot RQ Worker pods
  extraEnvVarsCM: []
  # -- List of names of existing Secrets containing extra env vars for Nautobot RQ Worker pods
  extraEnvVarsSecret: []
  # -- List of additional volumes for the Nautobot RQ Worker pod
  extraVolumes: []
  # -- List of additional volumeMounts for the Nautobot RQ Worker containers
  extraVolumeMounts: []
  # -- Add additional sidecar containers to the Nautobot RQ Worker pods
  sidecars: []
  # e.g.
  # sidecars:
  #   - name: your-image-name
  #     image: your-image
  #     imagePullPolicy: Always
  #     ports:
  #       - name: portname
  #         containerPort: 1234

  # -- [ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) Add additional init containers to the Nautobot RQ Worker pods
  initContainers: []
  # e.g.
  # initContainers:
  #  - name: your-image-name
  #    image: your-image
  #    imagePullPolicy: Always
  #    command: ['sh', '-c', 'echo "hello world"']

  # -- [ref](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/) Define a horizontal pod autoscaler
  # @default -- See values.yaml
  autoscaling:
    # -- Add an horizontal pod autoscaler for the RQ Worker (beta)
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    metrics:
      - type: "Resource"
        resource:
          name: "cpu"
          target:
            type: "Utilization"
            averageUtilization: 50
    behavior: {}

# Nautobot Celery Worker
celeryWorker:
  # -- Enables the Celery Worker for Nautobot
  enabled: true
  # -- Number of Nautobot Celery Workers replicas to deploy
  replicaCount: 2
  # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy) Number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot Celery Worker liveness probe
  # @default -- See values.yaml
  livenessProbe:
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot Celery Worker readiness probe
  # @default -- See values.yaml
  readinessProbe:
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](http://kubernetes.io/docs/user-guide/compute-resources/) Nautobot Celery Worker resource requests and limits
  # @default -- See values.yaml
  resources:
    requests:
      cpu: "400m"
      memory: "1G"
    limits:
      cpu: "3328m"
      memory: "6656M"

  # -- [ref](ttps://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Celery Worker Pods Security Context
  # @default -- See values.yaml
  podSecurityContext:
    enabled: true
    fsGroup: 999
    seccompProfile:
      type: "RuntimeDefault"

  # -- [ref](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) Nautobot Pod Distribution Budget
  # @default -- See values.yaml
  pdb:
    create: false
    minAvailable: 1
    # maxUnavailable: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Celery Worker Container Security Context
  # @default -- See values.yaml
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: false  # Must be set to false due to jobs directory
    runAsUser: 999
    capabilities:
      drop:
        - "ALL"

  # -- Override default Nautobot Celery Worker container command (useful when using custom images)
  # @default -- See values.yaml
  command:
    - "nautobot-server"
    - "celery"
    - "worker"
    - "--loglevel"
    - "$(NAUTOBOT_LOG_LEVEL)"

  # -- Override default Nautobot Celery Worker container args (useful when using custom images)
  args: []
  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/) Nautobot Celery Worker pods host aliases
  hostAliases: []
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) Extra labels for Nautobot Celery Worker pods
  podLabels: {}
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) Annotations for Nautobot Celery Worker pods
  podAnnotations: {}
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Celery Worker Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Celery Worker Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) Nautobot Celery Worker Node Affinity preset
  # @default -- See values.yaml
  nodeAffinityPreset:
    # -- Nautobot Celery Worker Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- Node label values to match. Ignored if `nautobot.affinity` is set
    values: []
    # e.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2

  # -- [ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity) Affinity for Nautobot Celery Worker pods assignment
  affinity: {}
  # -- [ref](https://kubernetes.io/docs/user-guide/node-selection/) Node labels for Nautobot Celery Worker pods assignment
  nodeSelector: {}
  # -- [ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/) Tolerations for Nautobot Celery Worker pods assignment
  tolerations: []

  updateStrategy:
    # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies) Nautobot Celery Worker Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot Celery Worker pods' priorityClassName
  priorityClassName: ""
  # -- lifecycleHooks for the Nautobot Celery Worker container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- Extra Env Vars to set only on the Nautobot Celery Worker pods
  extraEnvVars: []
  # e.g.
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"

  # -- List of names of existing ConfigMaps containing extra env vars for Nautobot Celery Worker pods
  extraEnvVarsCM: []
  # -- List of names of existing Secrets containing extra env vars for Nautobot Celery Worker pods
  extraEnvVarsSecret: []
  # -- List of additional volumes for the Nautobot Celery Worker pod
  extraVolumes: []
  # -- List of additional volumeMounts for the Nautobot Celery Worker containers
  extraVolumeMounts: []
  # -- Add additional sidecar containers to the Nautobot Celery Worker pods
  sidecars: []
  # e.g.
  # sidecars:
  #   - name: your-image-name
  #     image: your-image
  #     imagePullPolicy: Always
  #     ports:
  #       - name: portname
  #         containerPort: 1234

  # -- [ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) Add additional init containers to the Nautobot Celery Worker pods
  initContainers: []
  # e.g.
  # initContainers:
  #  - name: your-image-name
  #    image: your-image
  #    imagePullPolicy: Always
  #    command: ['sh', '-c', 'echo "hello world"']

  # -- [ref](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/) Define a horizontal pod autoscaler
  # @default -- See values.yaml
  autoscaling:
    # -- Add an horizontal pod autoscaler for the Celery Worker (beta)
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    metrics:
      - type: "Resource"
        resource:
          name: "cpu"
          target:
            type: "Utilization"
            averageUtilization: 50
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 2
            periodSeconds: 15

# Nautobot Celery Beat
celeryBeat:
  # -- Enables the Celery Beat (scheduled jobs) for Nautobot
  enabled: true
  # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy) Number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot Celery Beat liveness probe
  # @default -- See values.yaml
  livenessProbe:
    enabled: false
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot Celery Beat readiness probe
  # @default -- See values.yaml
  readinessProbe:
    enabled: false
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](http://kubernetes.io/docs/user-guide/compute-resources/) Nautobot Celery Beat resource requests and limits
  # @default -- See values.yaml
  resources:
    requests:
      cpu: "5m"
      memory: "256M"
    limits:
      cpu: "3328m"
      memory: "6656M"

  # -- [ref](ttps://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Celery Beat Pods Security Context
  # @default -- See values.yaml
  podSecurityContext:
    enabled: true
    fsGroup: 999
    seccompProfile:
      type: "RuntimeDefault"

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Celery Beat Container Security Context
  # @default -- See values.yaml
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: false  # Must be set to false due to jobs directory
    runAsUser: 999
    capabilities:
      drop:
        - "ALL"

  # -- Override default Nautobot Celery Beat container command (useful when using custom images)
  # @default -- See values.yaml
  command:
    - "nautobot-server"
    - "celery"
    - "beat"
    - "--loglevel"
    - "$(NAUTOBOT_LOG_LEVEL)"

  # -- Override default Nautobot Celery Beat container args (useful when using custom images)
  args: []
  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/) Nautobot Celery Beat pods host aliases
  hostAliases: []
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) Extra labels for Nautobot Celery Beat pods
  podLabels: {}
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) Annotations for Nautobot Celery Beat pods
  podAnnotations: {}
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Celery Beat Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Celery Beat Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) Nautobot Celery Beat Node Affinity preset
  # @default -- See values.yaml
  nodeAffinityPreset:
    # -- Nautobot Celery Beat Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- Node label values to match. Ignored if `nautobot.affinity` is set
    values: []
    # e.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2

  # -- [ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity) Affinity for Nautobot Celery Beat pods assignment
  affinity: {}
  # -- [ref](https://kubernetes.io/docs/user-guide/node-selection/) Node labels for Nautobot Celery Beat pods assignment
  nodeSelector: {}
  # -- [ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/) Tolerations for Nautobot Celery Beat pods assignment
  tolerations: []

  updateStrategy:
    # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies) Nautobot Celery Beat Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot Celery Beat pods' priorityClassName
  priorityClassName: ""
  # -- lifecycleHooks for the Nautobot Celery Beat container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- Extra Env Vars to set only on the Nautobot Celery Beat pods
  extraEnvVars: []
  # e.g.
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"

  # -- List of names of existing ConfigMaps containing extra env vars for Nautobot Celery Beat pods
  extraEnvVarsCM: []
  # -- List of names of existing Secrets containing extra env vars for Nautobot Celery Beat pods
  extraEnvVarsSecret: []
  # -- List of additional volumes for the Nautobot Celery Beat pod
  extraVolumes: []
  # -- List of additional volumeMounts for the Nautobot Celery Beat containers
  extraVolumeMounts: []
  # -- Add additional sidecar containers to the Nautobot Celery Beat pods
  sidecars: []
  # e.g.
  # sidecars:
  #   - name: your-image-name
  #     image: your-image
  #     imagePullPolicy: Always
  #     ports:
  #       - name: portname
  #         containerPort: 1234

  # -- [ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) Add additional init containers to the Nautobot Celery Beat pods
  initContainers: []
  # e.g.
  # initContainers:
  #  - name: your-image-name
  #    image: your-image
  #    imagePullPolicy: Always
  #    command: ['sh', '-c', 'echo "hello world"']


# ServiceAccount configuration
serviceAccount:
  # -- Enable creation of a Kubernetes Service Account for Nautobot
  create: true
  # -- Name of the Kubernetes Service Account for Nautobot
  # @default -- `$release_name`
  name: ""
  # -- Service account annotations
  annotations: {}

ingress:
  # -- Enable Ingress resource creation
  enabled: false

  # -- Ingress resource pathType valid values `ImplementationSpecific`, `Exact`, or `Prefix`
  pathType: "Prefix"

  # -- Override API Version (automatically detected if not set)
  apiVersion:  # yamllint disable-line rule:empty-values

  # -- Ingress Hostname
  hostname: "nautobot.local"

  # -- Ingress Class Name
  ingressClassName: ""

  # -- The Path to Nautobot. You may need to set this to '/*' in order to use this
  # with ALB ingress controllers.
  path: "/"

  # -- Ingress annotations defined as key:value pairs, see the documentation for your specific Ingress provider for more details
  annotations: {}

  # -- The backend protocol to for the Ingress to communicate with the Nautobot containers, valid values: http, and https
  backendProtocol: "https"

  # -- Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  tls: false

  # -- The name of the secret to use for the TLS certificate
  secretName: "nautobot-tls"

  # -- The list of additional hostnames to be covered with this ingress record.
  # Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  extraHosts: []
  # e.g.
  # extraHosts:
  # - hostname: nautobot2.local
  #   path: /
  #   pathType: "Prefix"
  #   extraPaths: []
  #   backendProtocol: "https"
  #

  # -- Any additional arbitrary paths that may need to be added to the ingress under the main host.
  # For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  extraPaths: []
  # e.g.
  # extraPaths:
  # - path: /*
  #   backend:
  #     service:
  #       name: ssl-redirect
  #       port:
  #         name: use-annotation
  #

  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) The tls configuration for additional hostnames to be covered with this ingress record.
  extraTls: []
  # e.g.
  # extraTls:
  # - hosts:
  #     - nautobot.local
  #   secretName: nautobot.local-tls

metrics:
  # -- Enable and configure a Prometheus [serviceMonitor](https://prometheus-operator.dev/docs/operator/design/#servicemonitor) (requires the [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator))
  enabled: false

  capacityMetrics:
    # -- Enable serviceMonitor for [Nautobot Capacity Metrics](https://github.com/nautobot/nautobot-plugin-capacity-metrics) (Requires custom image)
    enabled: false
    # -- [ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) Prometheus scrape interval for Nautobot Capacity Metrics serviceMonitor
    interval: "5m"
    # -- [ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) Prometheus scrape timeout for Nautobot Capacity Metrics serviceMonitor
    scrapeTimeout: "1m"
    # -- Additional labels for the  for Nautobot Capacity Metrics serviceMonitor Object
    labels: {}

  serviceMonitor:
    # -- [ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) Prometheus scrape interval
    interval: "1m"
    # -- [ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) Prometheus scrape timeout
    scrapeTimeout: "30s"
    # -- Additional labels for the serviceMonitor Object
    labels: {}

  # -- Enable and configure Prometheus Rules.
  # @default -- See values.yaml
  prometheusRule:
    enabled: false
    labels: {}
    # -- Configure additional rules for the chart.
    # @default -- See [alerting rules documentation](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)
    rules: []
    # - alert: "NautobotAbsent"
    #   annotations:
    #     description: "Nautobot has disappeared from Prometheus service discovery."
    #     summary: "Nautobot is down."
    #   expr: |
    #     absent(up{job=~".*nautobot.*"} == 1)
    #   for: "5m"
    #   labels:
    #     severity: "critical"

postgresql:
  # -- Enable deployment of the [Bitnami postgresql](https://github.com/bitnami/charts/tree/master/bitnami/postgresql) chart, all other `postgresql.*` parameters will be passed directly to that chart
  enabled: true
  image:
    pullPolicy: "Always"
  # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql#postgresql-parameters) PostgreSQL username
  postgresqlUsername: "nautobot"
  # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql#postgresql-parameters) PostgreSQL database name
  postgresqlDatabase: "nautobot"
  # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql#postgresql-parameters) PostgreSQL user password
  postgresqlPassword: ""
  securityContext:
    seccompProfile:
      type: "RuntimeDefault"
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false  # Must be set to false
    capabilities:
      drop:
        - "ALL"

redis:
  # -- Enable deployment of the [Bitnami redis](https://github.com/bitnami/charts/tree/master/bitnami/redis) chart, all other `redis.*` parameters will be passed directly to that chart
  enabled: true
  # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/redis#redis-common-configuration-parameters) Redis Architecture valid values: `standalone` or `replication`
  architecture: "standalone"
  auth:
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/redis#redis-common-configuration-parameters) Enable password authentication
    enabled: true
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/redis#redis-common-configuration-parameters) Redis password
    password: ""
  image:
    pullPolicy: "Always"
  master:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
  replica:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
  sentinel:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
  serviceAccount:
    automountServiceAccountToken: false

mariadb:
  # -- Enable deployment of the [Bitnami mariadb](https://github.com/bitnami/charts/tree/master/bitnami/mariadb) chart, all other `redis.*` parameters will be passed directly to that chart
  enabled: false
  auth:
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters) MariaDB database name
    database: "nautobot"
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters) MariaDB username
    username: "nautobot"
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters) MariaDB user password
    password: ""
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters) MariaDB root user password
    rootPassword: ""
  image:
    pullPolicy: "Always"
  metrics:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
  primary:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
    extraEnvVars:
      - name: "MARIADB_CHARACTER_SET"
        value: "utf8mb4"
      - name: "MARIADB_COLLATE"
        value: "utf8mb4_bin"
  secondary:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
    extraEnvVars:
      - name: "MARIADB_CHARACTER_SET"
        value: "utf8mb4"
      - name: "MARIADB_COLLATE"
        value: "utf8mb4_bin"

postgresqlha:
  # -- Enable deployment of the [Bitnami postgresql-ha](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha) chart, all other `postgresql-ha.*` parameters will be passed directly to that chart
  enabled: false
  image:
    pullPolicy: "Always"
  postgresql:
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters) PostgreSQL database name
    database: "nautobot"
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters) PostgreSQL postgres user password
    postgresPassword: ""
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters) PostgreSQL Repmgr password
    repmgrPassword: ""
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters) PostgreSQL username
    username: "nautobot"
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters) PostgreSQL user password
    password: ""
    pdb:
      # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters) Enable a Pod Distribution Budget for Postgres
      create: true
    securityContext:
      seccompProfile:
        type: "RuntimeDefault"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
  postgresqlImage:
    pullPolicy: "Always"
  metrics:
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
  metricsImage:
    pullPolicy: "Always"
  pgpool:
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters) Pgpool Admin password
    adminPassword: ""
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters) Name of the database to perform streaming replication checks
    srCheckDatabase: "nautobot"
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters) The number of replicas to deploy
    replicaCount: 2
    # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters) Strategy used to replace old Pgpool Pods by new ones
    # @default -- See values.yaml
    updateStrategy:
      type: "RollingUpdate"
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    pdb:
      # -- [ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters) Enable a Pod Distribution Budget for Pgpool
      create: true
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
  pgpoolImage:
    pullPolicy: "Always"
