---
# -- Annotations to be applied to ALL resources created by this chart
commonAnnotations: {}

# Nautobot UI front end service
service:
  # -- [Kubernetes service](https://kubernetes.io/docs/concepts/services-networking/service/) type, valid values: `ExternalName`, `ClusterIP`, `NodePort`, or `LoadBalancer`
  type: "ClusterIP"
  # -- Port to expose for Nautobot http access
  port: 80
  # -- Port to expose for Nautobot https access
  httpsPort: 443
  # Node ports to expose if service.type is NodePort
  nodePorts:
    # -- Node port for Nautobot http choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    http:  # yamllint disable-line rule:empty-values
    # -- Node port for Nautobot https choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    https:  # yamllint disable-line rule:empty-values
  # -- IP address to use as the clusterIP
  clusterIP:  # yamllint disable-line rule:empty-values
  # -- IP address to use as the loadBalancerIP
  loadBalancerIP:  # yamllint disable-line rule:empty-values
  # -- List of allowed CIDRs to access the load balancer default 0.0.0.0/0, cloud provider dependent
  loadBalancerSourceRanges: []
  # -- Kubernetes externalTrafficPolicy valid values: `Cluster` or `Local`
  externalTrafficPolicy: "Cluster"
  # -- Annotations to be applied to the service resource
  annotations: {}

# Nautobot Server
nautobot:
  ## Nautobot image
  image:
    # -- Nautobot image registry, common to all deployments
    registry: "ghcr.io"
    # -- Nautobot image name, common to all deployments
    repository: "nautobot/nautobot"
    # -- Nautobot image tag, common to all deployments
    tag: "1.1.3"
    # [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/), common to all deployments valid values: `Always`, `Never`, or `IfNotPresent`
    pullPolicy: "IfNotPresent"
    # -- List of secret names to be used as image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/), common to all deployments
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  # -- Number of Nautobot server replicas to deploy
  replicaCount: 2
  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot liveness probe
  livenessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes) Nautobot readiness probe
  readinessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # -- [ref](http://kubernetes.io/docs/user-guide/compute-resources/) Nautobot resource requests and limits
  resources:
    limits:
      cpu: "2"
      memory: "2Gi"
    requests:
      cpu: "0.7"
      memory: "784Mi"

  # -- [ref](ttps://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Pods Security Context
  podSecurityContext:
    enabled: true
    fsGroup: 999

  # -- [ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) Nautobot Container Security Context
  containerSecurityContext:
    enabled: true
    runAsUser: 999
    runAsGroup: 999

  # -- Override default Nautobot container command (useful when using custom images)
  command: []
  # -- Override default Nautobot container args (useful when using custom images)
  args: []
  # -- [ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/) Nautobot pods host aliases
  hostAliases: []
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) Extra labels for nautobot pods
  podLabels: {}
  # -- [ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) Annotations for nautobot pods
  podAnnotations: {}
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity) Nautobot Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) Nautobot Node Affinity preset
  nodeAffinityPreset:
    # -- Nautobot Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- Node label values to match. Ignored if `nautobot.affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []

  # -- [ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity) Affinity for Nautobot pods assignment
  affinity: {}
  # -- [ref](https://kubernetes.io/docs/user-guide/node-selection/) Node labels for Nautobot pods assignment
  nodeSelector: {}
  # -- [ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/) Tolerations for Nautobot pods assignment
  tolerations: []

  updateStrategy:
    # -- [ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies) Nautobot Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot pods' priorityClassName
  priorityClassName: ""
  # -- lifecycleHooks for the Nautobot container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- Extra Env Vars to set only on the Nautobot server pods
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  # -- Name of existing ConfigMap containing extra env vars for Nautobot server pods
  extraEnvVarsCM:  # yamllint disable-line rule:empty-values
  # -- Name of existing Secret containing extra env vars for Nautobot server pods
  extraEnvVarsSecret:  # yamllint disable-line rule:empty-values
  # -- List of additional volumes for the Nautobot server pod
  extraVolumes: []
  # -- List of additional volumeMounts for the Nautobot containers
  extraVolumeMounts: []
  # -- Add additional sidecar containers to the Nautobot server pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}
  # -- [ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) Add additional init containers to the Nautobot server pods
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: {}

  ###################################
  ## Nautobot Application Settings ##
  ###################################

  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/#debug) Enable Nautobot Debug (NAUTOBOT_DEBUG)
  debug: false

  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#allowed_hosts) Space seperated list of Nautobot allowed hosts (NAUTOBOT_ALLOWED_HOSTS)
  allowedHosts: "*"

  # Nautobot database configuration
  db:
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot database engine, valid values: `django.db.backends.postgresql` and `django.db.backends.mysql` (NAUTOBOT_DB_ENGINE)
    engine: "django.db.backends.postgresql"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database hostname, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_HOST)
    host: "postgres"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database name, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_NAME)
    name: "nautobot"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database password, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_PASSWORD)
    password: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database port, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_PORT)
    port: 5432
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot database timeout (NAUTOBOT_DB_TIMEOUT)
    timeout: 300
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#databases) Nautobot external database username, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_USER)
    user: "nautobot"

  # -- Log Level used for Celery logging, valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`
  logLevel: "INFO"
  # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/#metrics_enabled) Enable Prometheus metrics endpoint (NAUTOBOT_METRICS_ENABLED)
  metrics: true

  # Nautobot Redis configuration
  redis:
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external redis hostname, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_HOST)
    host: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external redis password, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_PASSWORD)
    password: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external redis port, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_PORT)
    port: 6379
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external redis ssl enabled, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_SSL)
    ssl: false
    # -- [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#rq_queues) Nautobot external redis username, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_USERNAME)
    username: ""

  # [ref](https://nautobot.readthedocs.io/en/stable/configuration/required-settings/#secret_key) Nautobot Secret Key (NAUTOBOT_SECRET_KEY)
  secretKey: ""
  superUser:
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_create_superuser) Create a new super user account in Nautobot once deployed (NAUTOBOT_CREATE_SUPERUSER)
    enabled: true 
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_api_token) Configure an API key for the super user if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_API_TOKEN)
    apitoken: ""
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_email) Configure an email address for the super user if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_EMAIL)
    email: "admin@example.com"
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_name) User name to use for the super user to be created if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_NAME)
    username: "admin"  # NAUTOBOT_SUPERUSER_NAME
    # -- [ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_password) Password to use for the super user to be created if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_NAME), if unset a random password will be generated
    password: ""  # NAUTOBOT_SUPERUSER_PASSWORD

  # -- An array of envirnoment variable objects (`name` and `value` are required) to add to ALL Nautobot related deployments (i.e. `celeryWorker` and `rqWorker`)
  ## e.g:
  ## extraVars:
  ##   - name: "NAUTOBOT_BANNER_TOP"
  ##     value: "Nautobot Helm Chart"
  extraVars: []  # https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/

## Nautobot RQ Worker
rqWorker:
  enabled: true
  ## @param worker.replicaCount Number of nautobot replicas to deploy
  ##
  replicaCount: 2
  ## Configure extra options for nautobot containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param worker.livenessProbe.enabled Enable livenessProbe on nautobot nodes
  ## @param worker.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param worker.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param worker.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param worker.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param worker.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    exec:
      command:
        - "nautobot-server"
        - "health_check"
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 8
    failureThreshold: 3
    successThreshold: 1
  ## @param worker.readinessProbe.enabled Enable readinessProbe on nautobot nodes
  ## @param worker.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param worker.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param worker.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param worker.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param worker.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    exec:
      command:
        - "nautobot-server"
        - "health_check"
    initialDelaySeconds: 5
    periodSeconds: 15
    timeoutSeconds: 8
    failureThreshold: 3
    successThreshold: 1

  ## nautobot resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param worker.resources.limits The resources limits for the nautobot containers
  ## @param worker.resources.requests The requested resources for the nautobot containers
  ##
  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: ".1"
      memory: "256Mi"
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.podSecurityContext.enabled Enabled nautobot pods' Security Context
  ## @param worker.podSecurityContext.fsGroup Set nautobot pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 999
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.containerSecurityContext.enabled Enabled nautobot containers' Security Context
  ## @param worker.containerSecurityContext.runAsUser Set nautobot containers' Security Context runAsUser
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 999

  ## @param worker.command Override default container command (useful when using custom images)
  ##
  command:
    - "nautobot-server"
    - "rqworker"
  ## @param worker.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param worker.hostAliases nautobot pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param worker.podLabels Extra labels for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param worker.podAnnotations Annotations for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param worker.podAffinityPreset Pod affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param worker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: "soft"
  ## Node worker.affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param worker.nodeAffinityPreset.type Node affinity preset type. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param worker.nodeAffinityPreset.key Node label key to match. Ignored if `worker.affinity` is set
    ##
    key: ""
    ## @param worker.nodeAffinityPreset.values Node label values to match. Ignored if `worker.affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param worker.affinity Affinity for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## NOTE: `worker.podAffinityPreset`, `worker.podAntiAffinityPreset`, and `worker.nodeAffinityPreset` will be ignored when it's set
  ##
  affinity: {}
  ## @param worker.nodeSelector Node labels for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param worker.tolerations Tolerations for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param worker.updateStrategy.type nautobot statefulset strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    ## StrategyType
    ## Can be set to RollingUpdate or OnDelete
    ##
    type: "RollingUpdate"
  ## @param worker.priorityClassName nautobot pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param worker.lifecycleHooks for the nautobot container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param worker.extraEnvVars Array with extra environment variables to add to nautobot nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param worker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nautobot nodes
  ##
  extraEnvVarsCM:  # yamllint disable-line rule:empty-values
  ## @param worker.extraEnvVarsSecret Name of existing Secret containing extra env vars for nautobot nodes
  ##
  extraEnvVarsSecret:  # yamllint disable-line rule:empty-values
  ## @param worker.extraVolumes Optionally specify extra list of additional volumes for the nautobot pod(s)
  ##
  extraVolumes: []
  ## @param worker.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nautobot container(s)
  ##
  extraVolumeMounts: []
  ## @param worker.sidecars Add additional sidecar containers to the nautobot pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}
  ## @param worker.initContainers Add additional init containers to the nautobot pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: {}

## Nautobot Celery Worker
##
celeryWorker:
  enabled: true
  ## @param worker.replicaCount Number of nautobot replicas to deploy
  ##
  replicaCount: 2
  ## Configure extra options for nautobot containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param worker.livenessProbe.enabled Enable livenessProbe on nautobot nodes
  ## @param worker.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param worker.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param worker.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param worker.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param worker.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  ## @param worker.readinessProbe.enabled Enable readinessProbe on nautobot nodes
  ## @param worker.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param worker.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param worker.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param worker.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param worker.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  ## nautobot resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param worker.resources.limits The resources limits for the nautobot containers
  ## @param worker.resources.requests The requested resources for the nautobot containers
  ##
  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: ".1"
      memory: "512Mi"
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.podSecurityContext.enabled Enabled nautobot pods' Security Context
  ## @param worker.podSecurityContext.fsGroup Set nautobot pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 999
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.containerSecurityContext.enabled Enabled nautobot containers' Security Context
  ## @param worker.containerSecurityContext.runAsUser Set nautobot containers' Security Context runAsUser
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 999

  ## @param worker.command Override default container command (useful when using custom images)
  ##
  command:
    - "nautobot-server"
    - "celery"
    - "worker"
    - "--loglevel"
    - "$(NAUTOBOT_LOG_LEVEL)"
  ## @param worker.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param worker.hostAliases nautobot pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param worker.podLabels Extra labels for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param worker.podAnnotations Annotations for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param worker.podAffinityPreset Pod affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param worker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: "soft"
  ## Node worker.affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param worker.nodeAffinityPreset.type Node affinity preset type. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param worker.nodeAffinityPreset.key Node label key to match. Ignored if `worker.affinity` is set
    ##
    key: ""
    ## @param worker.nodeAffinityPreset.values Node label values to match. Ignored if `worker.affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param worker.affinity Affinity for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## NOTE: `worker.podAffinityPreset`, `worker.podAntiAffinityPreset`, and `worker.nodeAffinityPreset` will be ignored when it's set
  ##
  affinity: {}
  ## @param worker.nodeSelector Node labels for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param worker.tolerations Tolerations for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param worker.updateStrategy.type nautobot statefulset strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    ## StrategyType
    ## Can be set to RollingUpdate or OnDelete
    ##
    type: "RollingUpdate"
  ## @param worker.priorityClassName nautobot pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param worker.lifecycleHooks for the nautobot container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param worker.extraEnvVars Array with extra environment variables to add to nautobot nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param worker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nautobot nodes
  ##
  extraEnvVarsCM:  # yamllint disable-line rule:empty-values
  ## @param worker.extraEnvVarsSecret Name of existing Secret containing extra env vars for nautobot nodes
  ##
  extraEnvVarsSecret:  # yamllint disable-line rule:empty-values
  ## @param worker.extraVolumes Optionally specify extra list of additional volumes for the nautobot pod(s)
  ##
  extraVolumes: []
  ## @param worker.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nautobot container(s)
  ##
  extraVolumeMounts: []
  ## @param worker.sidecars Add additional sidecar containers to the nautobot pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}
  ## @param worker.initContainers Add additional init containers to the nautobot pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: {}

## @section Other Parameters

## ServiceAccount configuration
##
serviceAccount:
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  ##
  create: true
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the common.names.fullname template
  ##
  name: ""

ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: false

  ## Ingress Path type
  ##
  pathType: "ImplementationSpecific"

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:  # yamllint disable-line rule:empty-values

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: "nautobot.local"

  ## The Path to Nautobot. You may need to set this to '/*' in order to use this
  ## with ALB ingress controllers.
  ##
  path: "/"

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: false

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: nautobot.local
  ##   path: /
  ##

  ## Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##

  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - nautobot.local
  ##   secretName: nautobot.local-tls
  ##

  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  secrets: []
  ## - name: nautobot.local-tls
  ##   key:
  ##   certificate:
  ##

## Add an horizontal pod autoscaler
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
##
autoscaling:
  enabled: false
  apiVersion: "autoscaling/v2beta2"
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: "Resource"
      resource:
        name: "cpu"
        targetAverageUtilization: 80

postgresql:
  enabled: true
  postgresqlUsername: "nautobot"
  postgresqlDatabase: "nautobot"
  postgresqlPassword: ""

redis:
  enabled: true
  auth:
    enabled: true
    password: ""
