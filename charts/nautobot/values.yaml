---
# -- (map[string]string) Annotations to be applied to ALL resources created by this chart
commonAnnotations: {}
# Nautobot UI front end service
service:
  # -- (`ExternalName`, `ClusterIP`, `NodePort`, or `LoadBalancer`) [[ref](https://kubernetes.io/docs/concepts/services-networking/service/)] Kubernetes service type, valid values: `ExternalName`, `ClusterIP`, `NodePort`, or `LoadBalancer`
  type: "ClusterIP"
  # -- Port to expose for Nautobot http access
  port: 80
  # -- Port to expose for Nautobot https access
  httpsPort: 443
  # Node ports to expose if service.type is NodePort
  nodePorts:
    # -- (int) Node port for Nautobot http choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    http:  # yamllint disable-line rule:empty-values
    # -- (int) Node port for Nautobot https choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    https:  # yamllint disable-line rule:empty-values
    # -- (int) Node port for Nautobot uwsgimetrics choose port in Kubernetes `--service-node-port-range` typically 30000-32767
    uwsgimetrics:  # yamllint disable-line rule:empty-values
  # -- (IP) IP address to use as the clusterIP
  clusterIP:  # yamllint disable-line rule:empty-values
  # -- (IP) IP address to use as the loadBalancerIP
  loadBalancerIP:  # yamllint disable-line rule:empty-values
  # -- ([]CIDR) List of allowed CIDRs to access the load balancer default 0.0.0.0/0, cloud provider dependent
  loadBalancerSourceRanges: []
  # -- (`Cluster`, `Local`) Kubernetes externalTrafficPolicy valid values: `Cluster` or `Local`
  externalTrafficPolicy: "Cluster"
  # -- (map[string]string) [[ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)] Annotations to be applied to the service resource
  annotations: {}
  # -- ([]ServicePort) Extra ports to expose in the nautobot service (normally used with the `sidecars` value)
  extraPorts: []

# Nautobot Server
nautobot:
  # -- Enable the default Nautobot deployment
  enabled: true
  # Nautobot image
  image:
    # -- Nautobot image registry, common to all deployments
    registry: "ghcr.io"
    # -- Nautobot image name, common to all deployments
    repository: "nautobot/nautobot"
    # -- Nautobot image tag, common to all deployments
    tag: "2.1.9-py3.11"
    # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/), common to all deployments valid values: `Always`, `Never`, or `IfNotPresent`
    pullPolicy: "Always"
    # -- ([]string) List of secret names to be used as image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/), common to all deployments
    pullSecrets: []
    # e.g.
    # pullSecrets:
    #   - myRegistryKeySecretName

  # -- Number of Nautobot server replicas to deploy
  replicaCount: 2
  # -- [[ref](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy)] Number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] Nautobot liveness probe
  # @default -- See values.yaml
  livenessProbe:
    # -- Enable the Nautobot Liveness Probe
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server health_check"
    initialDelaySeconds: 3
    periodSeconds: 15
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- [[ref](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/)] Termination Grace Period Seconds
  terminationGracePeriodSeconds: 30

  # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] Nautobot readiness probe
  # @default -- See values.yaml
  readinessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 3
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # -- (ResourceRequirements) (ResourceRequirements) [[ref](http://kubernetes.io/docs/user-guide/compute-resources/)] Nautobot resource requests and limits
  # @default -- See values.yaml
  resources:
    requests:
      cpu: "300m"
      memory: "1280M"
    limits:
      cpu: "1000m"
      memory: "8704M"

  # -- (PodSecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] Nautobot Pods Security Context
  # @default -- See values.yaml
  podSecurityContext:
    # -- Enable the Nautobot Pod security context
    enabled: true
    fsGroup: 999
    seccompProfile:
      type: "RuntimeDefault"

  # -- [[ref](https://kubernetes.io/docs/tasks/run-application/configure-pdb/)] Nautobot Pod Distribution Budget
  # @default -- See values.yaml
  pdb:
    create: false
    minAvailable: 1
    # maxUnavailable: 1

  # -- (SecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] Nautobot Container Security Context
  # @default -- See values.yaml
  containerSecurityContext:
    allowPrivilegeEscalation: false
    # -- Enable the Nautobot container security context
    enabled: true
    readOnlyRootFilesystem: false  # Must be set to false due to jobs directory
    runAsUser: 999
    runAsGroup: 999
    capabilities:
      drop:
        - "ALL"

  # -- ([]string) Override default Nautobot container command (useful when using custom images)
  command:
    - "nautobot-server"
    - "start"
    - "--ini"
    - "/opt/nautobot/uwsgi.ini"
  # -- ([]string) Override default Nautobot container args (useful when using custom images)
  args: []
  # -- ([]HostAlias) [[ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)] Nautobot pods host aliases
  hostAliases: []
  # -- (map[string]string) [[ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)] Extra labels for Nautobot pods
  podLabels: {}
  # -- (map[string]string) [[ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)] Annotations for Nautobot pods
  podAnnotations: {}
  # -- (`soft`, `hard`) [[ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity)] Nautobot Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- (`soft`, `hard`) [[ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity)] Nautobot Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [[ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity)] Nautobot Node Affinity preset
  # @default -- See values.yaml
  nodeAffinityPreset:
    # -- (`soft`, `hard`) Nautobot Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- ([]string) Node label values to match. Ignored if `nautobot.affinity` is set
    values: []
    # e.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2

  # -- (Affinity) [[ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity)] Affinity for Nautobot pods assignment
  affinity: {}
  # -- (NodeSelector) [[ref](https://kubernetes.io/docs/user-guide/node-selection/)] Node labels for Nautobot pods assignment
  nodeSelector: {}
  # -- ([]Toleration) [[ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)] Tolerations for Nautobot pods assignment
  tolerations: []

  updateStrategy:
    # -- (`Recreate`, `RollingUpdate`) [[ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies)] Nautobot Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot pods' priorityClassName
  priorityClassName: ""
  # -- (Lifecycle) lifecycleHooks for the Nautobot container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- ([]EnvVar) Extra Env Vars to set only on the Nautobot server pods
  extraEnvVars: []
  # e.g.
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"

  # -- ([]string) List of names of existing ConfigMaps containing extra env vars for Nautobot server pods
  extraEnvVarsCM: []
  # -- ([]string) List of names of existing Secrets containing extra env vars for Nautobot server pods
  extraEnvVarsSecret: []
  # -- ([]Volume) List of additional volumes for the Nautobot server pod
  extraVolumes: []
  # -- ([]VolumeMount) List of additional volumeMounts for the Nautobot containers
  extraVolumeMounts: []
  # -- ([]Container) Add additional sidecar containers to the Nautobot server pods
  sidecars: []
  # e.g.
  # sidecars:
  #   - name: your-image-name
  #     image: your-image
  #     imagePullPolicy: Always
  #     ports:
  #       - name: portname
  #         containerPort: 1234

  # -- ([]Container) [[ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)] Add additional init containers to the Nautobot server pods
  initContainers: []
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']

  # -- [[ref](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)] Define a horizontal pod autoscaler
  # @default -- See values.yaml
  autoscaling:
    # -- Add an horizontal pod autoscaler for Nautobot (beta)
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    metrics:
      - type: "Resource"
        resource:
          name: "cpu"
          target:
            type: "Utilization"
            averageUtilization: 150
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 2
            periodSeconds: 15

  # Add a Persistent Volume Claim for Nautobot static files
  persistenceStaticFiles:
    # --- Enable PVC and the relevant volumes
    enabled: false
    # --- [Kubernetes StorageClass Name](https://kubernetes.io/docs/concepts/storage/storage-classes/), for the creation of Persistent Volume Claim
    storageClassName: ""
    # --- [Kubernetes Volumes AccessMode](https://kubernetes.io/docs/concepts/storage/storage-classes/)
    accessMode: "ReadWriteOnce"
    # --- Persistent storage size request
    size: "1Gi"
    # --- [Kubernetes PVC Selectors](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector) to specify volume for Persistent Volume Claim
    selector: {}
    # e.g.
    # selector:
    #   matchLabel:
    #     nautobot-storage: static

  # Nautobot NGINX configuration
  nginx:
    # -- Enable an nginx sidecar to proxy Nautobot traffic (can be useful for large deployments)
    enabled: false
    # NGINX image
    image:
      # -- NGINX image registry
      registry: "docker.io"
      # -- NGINX image name
      repository: "nginxinc/nginx-unprivileged"
      # -- NGINX image tag
      tag: "1.25"
      # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/), common to all deployments valid values: `Always`, `Never`, or `IfNotPresent`
      pullPolicy: "Always"
      # -- ([]string) List of secret names to be used as image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/), common to all deployments
      pullSecrets: []
      # e.g.
      # pullSecrets:
      #   - myRegistryKeySecretName

    # -- (Lifecycle) lifecycleHooks for the NGINX container(s) to automate configuration before or after startup
    lifecycleHooks: {}

    # -- (SecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] NGINX Container Security Context
    # @default -- See values.yaml
    containerSecurityContext:
      # -- Enable the nginx container security context
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      runAsUser: 101
      capabilities:
        drop:
          - "ALL"
        add:
          - "NET_BIND_SERVICE"

    # -- ([]EnvVar) Extra Env Vars to set only on the NGINX containers
    extraEnvVars: []
    # e.g.
    # extraEnvVars:
    #   - name: FOO
    #     value: "bar"

    # -- ([]string) List of names of existing ConfigMaps containing extra env vars for the NGINX containers
    extraEnvVarsCM: []
    # -- ([]string) List of names of existing Secrets containing extra env vars for the NGINX containers
    extraEnvVarsSecret: []

    # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] NGINX liveness probe
    # @default -- See values.yaml
    livenessProbe:
      enabled: true
      tcpSocket:
        port: "https"
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

    # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] NGINX readiness probe
    # @default -- See values.yaml
    readinessProbe:
      enabled: true
      httpGet:
        path: "/"
        port: "metrics"
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

    # -- (ResourceRequirements) [[ref](http://kubernetes.io/docs/user-guide/compute-resources/)] NGINX resource requests and limits
    # @default -- See values.yaml
    resources:
      requests:
        cpu: ".001"
        memory: "6Mi"
      limits:
        cpu: ".5"
        memory: "128Mi"

  #################################
  # Nautobot Application Settings #
  #################################
  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/)] Replace the entire `nautobot_config.py` file with this value<sup>[1](#notes)</sup>
  config: ""
  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/optional-settings/#debug)] Enable Nautobot Debug (NAUTOBOT_DEBUG)<sup>[1](#notes)</sup>
  debug: false

  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#allowed_hosts)] Space separated list of Nautobot allowed hosts (NAUTOBOT_ALLOWED_HOSTS)<sup>[1](#notes)</sup>
  allowedHosts: "*"

  # Nautobot database configuration
  db:
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot database engine, valid values: `django.db.backends.postgresql`, `django_prometheus.db.backends.postgresql` (metrics enabled), `django.db.backends.mysql`, and `django_prometheus.db.backends.mysql` (metrics enabled) (NAUTOBOT_DB_ENGINE)<sup>[1](#notes)</sup>
    engine: "django.db.backends.postgresql"
    # -- Name of existing secret to use for Database passwords<sup>[1](#notes)</sup>
    existingSecret: ""
    # -- Password key to be retrieved from existing secret<sup>[1](#notes)</sup>
    existingSecretPasswordKey: ""
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot external database hostname, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_HOST)<sup>[1](#notes)</sup>
    host: "postgres"
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot external database name, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_NAME)<sup>[1](#notes)</sup>
    name: "nautobot"
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot external database password, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_PASSWORD)<sup>[1](#notes)</sup>
    password: ""
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot external database port, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_PORT)<sup>[1](#notes)</sup>
    port: 5432
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot database timeout (NAUTOBOT_DB_TIMEOUT)<sup>[1](#notes)</sup>
    timeout: 300
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#databases)] Nautobot external database username, ignored if `postgresql.enabled` is `true` (NAUTOBOT_DB_USER)<sup>[1](#notes)</sup>
    user: "nautobot"

  # -- (`CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`) Log Level used for Celery logging, valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`<sup>[1](#notes)</sup>
  logLevel: "INFO"
  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/optional-settings/#metrics_enabled)] Enable Prometheus metrics endpoint (NAUTOBOT_METRICS_ENABLED)<sup>[1](#notes)</sup>
  metrics: true

  # Nautobot Redis configuration
  redis:
    # -- Name of existing secret to use for Redis passwords<sup>[1](#notes)</sup>
    existingSecret: ""
    # -- Password key to be retrieved from existing secret<sup>[1](#notes)</sup>
    existingSecretPasswordKey: ""
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#rq_queues)] Nautobot external Redis hostname, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_HOST)<sup>[1](#notes)</sup>
    host: ""
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#rq_queues)] Nautobot external Redis password, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_PASSWORD)<sup>[1](#notes)</sup>
    password: ""
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#rq_queues)] Nautobot external Redis port, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_PORT)<sup>[1](#notes)</sup>
    port: 6379
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#rq_queues)] Nautobot external Redis ssl enabled, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_SSL)<sup>[1](#notes)</sup>
    ssl: false
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#rq_queues)] Nautobot external Redis username, ignored if `redis.enabled` is `true` (NAUTOBOT_REDIS_USERNAME)<sup>[1](#notes)</sup>
    username: ""

  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#secret_key)] Nautobot Secret Key (NAUTOBOT_SECRET_KEY)<sup>[1](#notes)</sup>
  secretKey: ""

  django:
    # -- Name of existing secret to use for NAUTOBOT_SECRET_KEY<sup>[1](#notes)</sup>
    existingSecret: ""
    # -- SecretKey key to be retrieved from existing secret<sup>[1](#notes)</sup>
    existingSecretSecretKeyKey: ""
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/required-settings/#secret_key)] Nautobot Secret Key (NAUTOBOT_SECRET_KEY), takes priority over nautobot.secretKey<sup>[1](#notes)</sup>
    secretKey: ""

  superUser:
    # -- Name of existing secret to use for superuser password and API token<sup>[1](#notes)</sup>
    existingSecret: ""
    # -- Password key to be retrieved from existing secret<sup>[1](#notes)</sup>
    existingSecretPasswordKey: ""
    # -- API Token key to be retrieved from existing secret<sup>[1](#notes)</sup>
    existingSecretApiTokenKey: ""
    # -- [[ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_create_superuser)] Create a new super user account in Nautobot once deployed (NAUTOBOT_CREATE_SUPERUSER)<sup>[1](#notes)</sup>
    enabled: true
    # -- [[ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_api_token)] Configure an API key for the super user if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_API_TOKEN)<sup>[1](#notes)</sup>
    apitoken: ""
    # -- [[ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_email)] Configure an email address for the super user if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_EMAIL)<sup>[1](#notes)</sup>
    email: "admin@example.com"
    # -- [[ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_name)] User name to use for the super user to be created if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_NAME)<sup>[1](#notes)</sup>
    username: "admin"  # NAUTOBOT_SUPERUSER_NAME
    # -- [[ref](https://nautobot.readthedocs.io/en/stable/docker/#nautobot_superuser_password)] Password to use for the super user to be created if `nautobot.superUser.enabled` is `true` (NAUTOBOT_SUPERUSER_NAME), if unset a random password will be generated<sup>[1](#notes)</sup>
    password: ""  # NAUTOBOT_SUPERUSER_PASSWORD

  # -- [[ref](https://docs.nautobot.com/projects/helm-charts/en/stable/advanced-features/init-hook)] Run the Nautobot initialization tasks as a helm hook instead of an initContainer<sup>[1](#notes)</sup>
  singleInit: false

  # -- [[ref](https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html)] Replace the entire `uwsgi.ini` file with this value<sup>[1](#notes)</sup>
  uWSGIini: ""

  uwsgi:
    # -- [[ref](https://uwsgi-docs.readthedocs.io/en/latest/Options.html#listen)] Set the uWSGI socket listen queue size.<sup>[1](#notes)</sup>
    listen: 128
    # -- [[ref](https://uwsgi-docs.readthedocs.io/en/latest/Options.html#processes)] Spawn the specified number of workers/processes<sup>[1](#notes)</sup>
    processes: 3
    # -- [[ref](https://uwsgi-docs.readthedocs.io/en/latest/Options.html#threads)] Run each worker in prethreaded mode with the specified number of threads<sup>[1](#notes)</sup>
    threads: 2
    # -- [[ref](https://uwsgi-docs.readthedocs.io/en/latest/Options.html#buffer-size)] Set the max size of a request (request-body excluded), this generally maps to the size of request headers. By default it is 4k. If you receive a bigger request (for example with big cookies or query string) you may need to increase it. It is a security measure too, so adapt to your app needs instead of maxing it out.<sup>[1](#notes)</sup>
    bufferSize: 4096
    # -- [[ref]](https://uwsgi-docs.readthedocs.io/en/latest/Options.html#harakiri) Set the harakiri timeout value. If the value is 0 then the timeout is not set.
    harakiri: 0

  # -- ([]map[name,value]string)An array of environment variable objects (`name` and `value` are required) to add to ALL Nautobot and Nautobot Worker related deployments<sup>[1](#notes)</sup>
  extraVars: []  # https://docs.nautobot.com/projects/core/en/stable/configuration/optional-settings/
  # e.g.
  # extraVars:
  #   - name: "NAUTOBOT_BANNER_TOP"
  #     value: "Nautobot Helm Chart"

# -- Override values for the nautobot-init job if nautobot.singleInit is true
# @default -- See values.yaml
initJob:
  # -- (`post-install`, `pre-install`) [[ref](https://helm.sh/docs/topics/charts_hooks/#the-available-hooks)] Which helm hook should be used during the installation phase.
  installHook: "pre-install"
  # -- (`post-upgrade`, `pre-upgrade`) [[ref](https://helm.sh/docs/topics/charts_hooks/#the-available-hooks)] Which helm hook should be used during the upgrade phase.
  upgradeHook: "pre-upgrade"
  command: []

# -- (map[name]nautobot) Additional Nautobot deployments, map key is the name of the deployment and the additional keys `enabled`, `ingressPaths`, `initNautobot` are required for each Nautobot deployment, all other keys for each Nautobot will override the defaults provided by the root `.Values.nautobot`.
# @default -- See values.yaml
nautobots:
  # -- (nautobot) Values for the Default Nautobot deployment see values.yaml `.nautobot` for assumed defaults
  # @default -- See values.yaml
  default:
    enabled: true
    ingressPaths:
      - "/"
    # Should the docker entrypoint run to include the Nautobot post_upgrade steps
    initNautobot: true
    # Should this deployment ONLY run nginx hosting /static files?
    staticFilesOnly: false

# Enable a separate deployment specifically for API requests
# api:
#   enabled: true
#   ingressPaths:
#     - "/api"
#   initNautobot: false

# # Enable a separate deployment specifically for GraphQL requests
# graphql:
#   enabled: true
#   ingressPaths:
#     - "/api/graphql"
#     - "/graphql"
#   initNautobot: false

# Default values for Celery Workers
celery:
  # -- Enables the default Celery Worker for Nautobot
  enabled: true

  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/administration/celery-queues/#concurrency-setting)]Concurrency Setting (0: use the default which is the number of CPUs available on your system)<sup>[2](#notes)</sup>
  concurrency: 0
  # -- Number of Nautobot Celery Workers replicas to deploy
  replicaCount: 2
  # -- [[ref](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy)] Number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] Nautobot Celery Worker liveness probe
  # @default -- See values.yaml
  livenessProbe:
    enabled: false
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 5
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- [[ref](https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/)] Termination Grace Period Seconds
  terminationGracePeriodSeconds: 30

  # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] Nautobot Celery Worker readiness probe
  # @default -- See values.yaml
  readinessProbe:
    enabled: false
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # -- (ResourceRequirements) [[ref](http://kubernetes.io/docs/user-guide/compute-resources/)] Nautobot Celery Worker resource requests and limits
  # @default -- See values.yaml
  resources:
    requests:
      cpu: "400m"
      memory: "1G"
    limits:
      cpu: "3328m"
      memory: "6656M"

  # -- (PodSecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] Nautobot Celery Worker Pods Security Context
  # @default -- See values.yaml
  podSecurityContext:
    # -- Enable the Worker Pod security context
    enabled: true
    fsGroup: 999
    seccompProfile:
      type: "RuntimeDefault"

  # -- [[ref](https://kubernetes.io/docs/tasks/run-application/configure-pdb/)] Nautobot Pod Distribution Budget
  # @default -- See values.yaml
  pdb:
    create: false
    minAvailable: 1
    # maxUnavailable: 1

  # -- (SecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] Nautobot Celery Worker Container Security Context
  # @default -- See values.yaml
  containerSecurityContext:
    allowPrivilegeEscalation: false
    # -- Enable the Worker Celery Container security context
    enabled: true
    readOnlyRootFilesystem: false  # Must be set to false due to jobs directory
    runAsUser: 999
    capabilities:
      drop:
        - "ALL"

  # -- ([]string) Override default Nautobot Celery Worker container command (useful when using custom images)
  # @default -- See values.yaml
  command:
    - "nautobot-server"
    - "celery"
    - "worker"
    - "--loglevel"
    - "$(NAUTOBOT_LOG_LEVEL)"
    - "--queues"
    - "$(CELERY_TASK_QUEUES)"
    - "--events"

  # -- ([]string) Override default Nautobot Celery Worker container args (useful when using custom images)
  args: []
  # -- ([]HostAlias) [[ref](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)] Nautobot Celery Worker pods host aliases
  hostAliases: []
  # -- (map[string]string) [[ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)] Extra labels for Nautobot Celery Worker pods
  podLabels: {}
  # -- (map[string]string) [[ref](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)] Annotations for Nautobot Celery Worker pods
  podAnnotations: {}
  # -- (`soft`, `hard`) [[ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity)] Nautobot Celery Worker Pod affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAffinityPreset: ""
  # -- (`soft`, `hard`) [[ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity)] Nautobot Celery Worker Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
  podAntiAffinityPreset: "soft"

  # -- [[ref](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity)] Nautobot Celery Worker Node Affinity preset
  # @default -- See values.yaml
  nodeAffinityPreset:
    # -- Nautobot Celery Worker Node affinity preset type. Ignored if `nautobot.affinity` is set. Valid values: `soft` or `hard`
    type: ""
    # -- Node label key to match. Ignored if `nautobot.affinity` is set
    key: ""
    # -- Node label values to match. Ignored if `nautobot.affinity` is set
    values: []
    # e.g.
    # values:
    #   - e2e-az1
    #   - e2e-az2

  # -- (Affinity) [[ref](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity)] Affinity for Nautobot Celery Worker pods assignment
  affinity: {}
  # -- (NodeSelector) [[ref](https://kubernetes.io/docs/user-guide/node-selection/)] Node labels for Nautobot Celery Worker pods assignment
  nodeSelector: {}
  # -- ([]Toleration) [[ref](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)] Tolerations for Nautobot Celery Worker pods assignment
  tolerations: []

  updateStrategy:
    # -- (`Recreate`, `RollingUpdate`) [[ref](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies)] Nautobot Celery Worker Deployment strategy type
    type: "RollingUpdate"

  # -- Nautobot Celery Worker pods' priorityClassName
  priorityClassName: ""
  # -- (Lifecycle) lifecycleHooks for the Nautobot Celery Worker container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  # -- ([]EnvVar) Extra Env Vars to set only on the Nautobot Celery Worker pods
  extraEnvVars: []
  # e.g.
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"

  # -- ([]string) List of names of existing ConfigMaps containing extra env vars for Nautobot Celery Worker pods
  extraEnvVarsCM: []
  # -- ([]string) List of names of existing Secrets containing extra env vars for Nautobot Celery Worker pods
  extraEnvVarsSecret: []
  # -- ([]Volume) List of additional volumes for the Nautobot Celery Worker pod
  extraVolumes: []
  # -- ([]VolumeMount) List of additional volumeMounts for the Nautobot Celery Worker containers
  extraVolumeMounts: []
  # -- ([]Container) Add additional sidecar containers to the Nautobot Celery Worker pods
  sidecars: []
  # e.g.
  # sidecars:
  #   - name: your-image-name
  #     image: your-image
  #     imagePullPolicy: Always
  #     ports:
  #       - name: portname
  #         containerPort: 1234

  # -- ([]Container) [[ref](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)] Add additional init containers to the Nautobot Celery Worker pods
  initContainers: []
  # e.g.
  # initContainers:
  #  - name: your-image-name
  #    image: your-image
  #    imagePullPolicy: Always
  #    command: ['sh', '-c', 'echo "hello world"']

  # -- [[ref](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)] Define a horizontal pod autoscaler
  # @default -- See values.yaml
  autoscaling:
    # -- Add an horizontal pod autoscaler for the Celery Worker (beta)
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    metrics:
      - type: "Resource"
        resource:
          name: "cpu"
          target:
            type: "Utilization"
            averageUtilization: 50
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 1
            periodSeconds: 180
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: "Pods"
            value: 2
            periodSeconds: 15

  # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/configuration/optional-settings/#celery_worker_prometheus_ports)] Ports for Prometheus metric HTTP server running on the celery worker(s) if `nautobot.metrics` is `true`
  metricsPort: 8080

# -- (map[name]celery) Additional Celery Worker deployments, map key is the name of the deployment and the additional key `enabled` is required for each Worker deployment, all other keys for each Worker will override the defaults provided by the root `.Values.celery`.
# @default -- See values.yaml
workers:
  # -- (celery) Values for the Default Celery Worker deployment see values.yaml `.celery` for assumed defaults
  # @default -- See values.yaml
  default:
    enabled: true
    # -- [[ref](https://docs.nautobot.com/projects/core/en/stable/administration/celery-queues/)] a comma separated list of Celery Queues to listen on.
    taskQueues: "default"
  # -- (celery) Values for the Celery Beat deployment see values.yaml `.celery` for assumed defaults
  # @default -- See values.yaml
  beat:
    enabled: true
    concurrency: 0
    replicaCount: 1  # Beat can have a max replicaCount of 1
    command:
      - "nautobot-server"
      - "celery"
      - "beat"
      - "--loglevel"
      - "$(NAUTOBOT_LOG_LEVEL)"
    livenessProbe:
      initialDelaySeconds: 30
    readinessProbe:
      initialDelaySeconds: 30
    resources:
      requests:
        cpu: "5m"
        memory: "256M"

# -- DEPRECATED see [`workers.default`](#workers.default) and [`celery`](#celery-values)
celeryWorker: {}

# -- DEPRECATED see [`workers.beat`](#workers.beat) and []`celery`](#celery-values)
celeryBeat: {}

# ServiceAccount configuration
serviceAccount:
  # -- Enable creation of a Kubernetes Service Account for Nautobot
  create: true
  # -- Name of the Kubernetes Service Account for Nautobot
  # @default -- `$release_name`
  name: ""
  # -- Service account annotations
  annotations: {}
  # -- Auto Mount Service account token
  automountServiceAccountToken: false

ingress:
  # -- Enable Ingress resource creation
  enabled: false

  # -- Ingress resource pathType valid values `ImplementationSpecific`, `Exact`, or `Prefix`
  pathType: "Prefix"

  # -- Override API Version (automatically detected if not set)
  apiVersion:  # yamllint disable-line rule:empty-values

  # -- Ingress Hostname
  hostname: "nautobot.local"

  # -- Ingress Class Name
  ingressClassName: ""

  # -- The Path to Nautobot. You may need to set this to '/*' in order to use this
  # with ALB ingress controllers.
  path: "/"

  # -- Ingress annotations defined as key:value pairs, see the documentation for your specific Ingress provider for more details
  annotations: {}

  # -- The backend protocol to for the Ingress to communicate with the Nautobot containers, valid values: http, and https
  backendProtocol: "https"

  # -- Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  tls: false

  # -- The name of the secret to use for the TLS certificate
  secretName: "nautobot-tls"

  # -- The list of additional hostnames to be covered with this ingress record.
  # Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  extraHosts: []
  # e.g.
  # extraHosts:
  # - hostname: nautobot2.local
  #   path: /
  #   pathType: "Prefix"
  #   extraPaths: []
  #   backendProtocol: "https"
  #

  # -- Any additional arbitrary paths that may need to be added to the ingress under the main host.
  # For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  extraPaths: []
  # e.g.
  # extraPaths:
  # - path: /*
  #   backend:
  #     service:
  #       name: ssl-redirect
  #       port:
  #         name: use-annotation
  #

  # -- [[ref](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)] The tls configuration for additional hostnames to be covered with this ingress record.
  extraTls: []
  # e.g.
  # extraTls:
  # - hosts:
  #     - nautobot.local
  #   secretName: nautobot.local-tls

metrics:
  # -- Enable and configure a Prometheus [serviceMonitor](https://prometheus-operator.dev/docs/operator/design/#servicemonitor) (requires the [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator))
  enabled: false

  nginxExporter:
    enabled: false
    # NGINX Exporter image
    image:
      # -- NGINX Exporter image registry
      registry: "docker.io"
      # -- NGINX Exporter image name
      repository: "nginx/nginx-prometheus-exporter"
      # -- NGINX Exporter image tag
      tag: "0.11.0"
      # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/) valid values: `Always`, `Never`, or `IfNotPresent`
      pullPolicy: "Always"
      # -- ([]string) List of secret names to be used as image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/), common to all deployments
      pullSecrets: []
      # e.g.
      # pullSecrets:
      #   - myRegistryKeySecretName

    # -- (SecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] NGINX Exporter Container Security Context
    # @default -- See values.yaml
    containerSecurityContext:
      allowPrivilegeEscalation: false
      # -- Enable the SecurityContext for the nginx exporter container
      enabled: true
      readOnlyRootFilesystem: false
      runAsUser: 101
      capabilities:
        drop:
          - "ALL"

    # -- (ResourceRequirements) [[ref](http://kubernetes.io/docs/user-guide/compute-resources/)] NGINX Exporter resource requests and limits
    # @default -- See values.yaml
    resources:
      requests:
        cpu: ".1"
        memory: "6Mi"
      limits:
        cpu: ".5"
        memory: "128Mi"

    # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] NGINX Exporter liveness probe
    # @default -- See values.yaml
    livenessProbe:
      enabled: true
      httpGet:
        path: "/"
        port: "nginxmetrics"
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

    # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] NGINX Exporter readiness probe
    # @default -- See values.yaml
    readinessProbe:
      enabled: true
      httpGet:
        path: "/metrics"
        port: "nginxmetrics"
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

  uwsgiExporter:
    enabled: false
    # uWSGI Exporter image
    image:
      # -- uWSGI Exporter image registry
      registry: "docker.io"
      # -- uWSGI Exporter image name
      repository: "timonwong/uwsgi-exporter"
      # -- uWSGI Exporter image tag
      tag: "v1.3.0"
      # -- [Kubernetes image pull policy](https://kubernetes.io/docs/concepts/containers/images/) valid values: `Always`, `Never`, or `IfNotPresent`
      pullPolicy: "Always"
      # -- List of secret names to be used as image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/), common to all deployments
      pullSecrets: []
      # e.g.
      # pullSecrets:
      #   - myRegistryKeySecretName

    # -- (SecurityContext) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)] NGINX Exporter Container Security Context
    # @default -- See values.yaml
    containerSecurityContext:
      allowPrivilegeEscalation: false
      # -- Enable the SecurityContext for the uwsgi exporter container
      enabled: true
      readOnlyRootFilesystem: false
      runAsUser: 101
      capabilities:
        drop:
          - "ALL"

    # -- (ResourceRequirements) [[ref](http://kubernetes.io/docs/user-guide/compute-resources/)] uWSGI Exporter resource requests and limits
    # @default -- See values.yaml
    resources:
      requests:
        cpu: ".001"
        memory: "6Mi"
      limits:
        cpu: ".01"
        memory: "128Mi"

    # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] uWSGI Exporter liveness probe
    # @default -- See values.yaml
    livenessProbe:
      enabled: true
      httpGet:
        path: "/-/healthy"
        port: "uwsgimetrics"
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

    # -- (Probe) [[ref](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)] uWSGI Exporter readiness probe
    # @default -- See values.yaml
    readinessProbe:
      enabled: true
      httpGet:
        path: "/metrics"
        port: "uwsgimetrics"
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

  capacityMetrics:
    # -- Enable serviceMonitor for [Nautobot Capacity Metrics](https://github.com/nautobot/nautobot-plugin-capacity-metrics) (Requires custom image)
    enabled: false
    # -- The nautobot deployment to collect capacity metrics from
    nautobot: "default"
    # -- (Duration) [[ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config)] Prometheus scrape interval for Nautobot Capacity Metrics serviceMonitor
    interval: "5m"
    # -- (Duration) [[ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config)] Prometheus scrape timeout for Nautobot Capacity Metrics serviceMonitor
    scrapeTimeout: "1m"
    # -- (map[string]string) Additional labels for the  for Nautobot Capacity Metrics serviceMonitor Object
    labels: {}

  serviceMonitor:
    enabled: true
    # -- (Duration) [[ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config)] Prometheus scrape interval
    interval: "1m"
    # -- (Duration) [[ref](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config)] Prometheus scrape timeout
    scrapeTimeout: "30s"
    # -- (map[string]string) Additional labels for the serviceMonitor Object
    labels: {}

  # -- Enable and configure Prometheus Rules.
  # @default -- See values.yaml
  prometheusRule:
    enabled: false
    labels: {}
    # -- ([]PrometheusRule) Configure additional rules for the chart.
    # @default -- See [alerting rules documentation](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)
    rules: []
    # - alert: "NautobotAbsent"
    #   annotations:
    #     description: "Nautobot has disappeared from Prometheus service discovery."
    #     summary: "Nautobot is down."
    #   expr: |
    #     absent(up{job=~".*nautobot.*"} == 1)
    #   for: "5m"
    #   labels:
    #     severity: "critical"

postgresql:
  # -- Enable deployment of the [Bitnami postgresql](https://github.com/bitnami/charts/tree/master/bitnami/postgresql) chart, all other `postgresql.*` parameters will be passed directly to that chart
  enabled: true
  image:
    pullPolicy: "Always"
  auth:
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql#postgresql-parameters)] PostgreSQL username
    username: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql#postgresql-parameters)] PostgreSQL database name
    database: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql#postgresql-parameters)] PostgreSQL user password
    password: ""
  primary:
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      capabilities:
        drop:
          - "ALL"

redis:
  # -- Enable deployment of the [Bitnami redis](https://github.com/bitnami/charts/tree/master/bitnami/redis) chart, all other `redis.*` parameters will be passed directly to that chart
  enabled: true
  # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/redis#redis-common-configuration-parameters)] Redis Architecture valid values: `standalone` or `replication`
  architecture: "standalone"
  auth:
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/redis#redis-common-configuration-parameters)] Enable password authentication
    enabled: true
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/redis#redis-common-configuration-parameters)] Redis password
    password: ""
  image:
    pullPolicy: "Always"
  master:
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
    disableCommands: []
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
  metrics:
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
  replica:
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
      disableCommands: []
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
  sentinel:
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
  serviceAccount:
    automountServiceAccountToken: false

mariadb:
  # -- Enable deployment of the [Bitnami mariadb](https://github.com/bitnami/charts/tree/master/bitnami/mariadb) chart, all other `redis.*` parameters will be passed directly to that chart
  enabled: false
  auth:
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters)] MariaDB database name
    database: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters)] MariaDB username
    username: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters)] MariaDB user password
    password: ""
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/mariadb#mariadb-common-parameters)] MariaDB root user password
    rootPassword: ""
  image:
    pullPolicy: "Always"
  metrics:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - "ALL"
  primary:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
    extraEnvVars:
      - name: "MARIADB_CHARACTER_SET"
        value: "utf8mb4"
      - name: "MARIADB_COLLATE"
        value: "utf8mb4_bin"
  secondary:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      capabilities:
        drop:
          - "ALL"
    podSecurityContext:
      seccompProfile:
        type: "RuntimeDefault"
    extraEnvVars:
      - name: "MARIADB_CHARACTER_SET"
        value: "utf8mb4"
      - name: "MARIADB_COLLATE"
        value: "utf8mb4_bin"

postgresqlha:
  # -- Enable deployment of the [Bitnami postgresql-ha](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha) chart, all other `postgresql-ha.*` parameters will be passed directly to that chart
  enabled: false
  image:
    pullPolicy: "Always"
  postgresql:
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters)] PostgreSQL database name
    database: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters)] PostgreSQL postgres user password
    postgresPassword: ""
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters)] PostgreSQL Repmgr password
    repmgrPassword: ""
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters)] PostgreSQL username
    username: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters)] PostgreSQL user password
    password: ""
    pdb:
      # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#postgresql-with-repmgr-parameters)] Enable a Pod Distribution Budget for Postgres
      create: true
    podSecurityContext:
      enabled: true
      seccompProfile:
        type: "RuntimeDefault"
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
  postgresqlImage:
    pullPolicy: "Always"
  metrics:
    podSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
  metricsImage:
    pullPolicy: "Always"
  pgpool:
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters)] Pgpool Admin password
    adminPassword: ""
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters)] Name of the database to perform streaming replication checks
    srCheckDatabase: "nautobot"
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters)] The number of replicas to deploy
    replicaCount: 2
    # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters)] Strategy used to replace old Pgpool Pods by new ones
    # @default -- See values.yaml
    updateStrategy:
      type: "RollingUpdate"
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    pdb:
      # -- [[ref](https://github.com/bitnami/charts/tree/master/bitnami/postgresql-ha#pgpool-parameters)] Enable a Pod Distribution Budget for Pgpool
      create: true
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Must be set to false
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
  pgpoolImage:
    pullPolicy: "Always"

rabbitmq:
  # -- Enable deployment of the [Bitnami RabbitMQ](https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq) chart, all other `rabbitmq.*` parameters will be passed directly to that chart
  enabled: false
